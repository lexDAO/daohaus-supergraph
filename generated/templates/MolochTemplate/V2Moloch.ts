// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CancelProposal extends EthereumEvent {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get applicantAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConvertSharesToLoot extends EthereumEvent {
  get params(): ConvertSharesToLoot__Params {
    return new ConvertSharesToLoot__Params(this);
  }
}

export class ConvertSharesToLoot__Params {
  _event: ConvertSharesToLoot;

  constructor(event: ConvertSharesToLoot) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProcessActionProposal extends EthereumEvent {
  get params(): ProcessActionProposal__Params {
    return new ProcessActionProposal__Params(this);
  }
}

export class ProcessActionProposal__Params {
  _event: ProcessActionProposal;

  constructor(event: ProcessActionProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessGuildKickProposal extends EthereumEvent {
  get params(): ProcessGuildKickProposal__Params {
    return new ProcessGuildKickProposal__Params(this);
  }
}

export class ProcessGuildKickProposal__Params {
  _event: ProcessGuildKickProposal;

  constructor(event: ProcessGuildKickProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessProposal extends EthereumEvent {
  get params(): ProcessProposal__Params {
    return new ProcessProposal__Params(this);
  }
}

export class ProcessProposal__Params {
  _event: ProcessProposal;

  constructor(event: ProcessProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessWhitelistProposal extends EthereumEvent {
  get params(): ProcessWhitelistProposal__Params {
    return new ProcessWhitelistProposal__Params(this);
  }
}

export class ProcessWhitelistProposal__Params {
  _event: ProcessWhitelistProposal;

  constructor(event: ProcessWhitelistProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessWithdrawalProposal extends EthereumEvent {
  get params(): ProcessWithdrawalProposal__Params {
    return new ProcessWithdrawalProposal__Params(this);
  }
}

export class ProcessWithdrawalProposal__Params {
  _event: ProcessWithdrawalProposal;

  constructor(event: ProcessWithdrawalProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Ragequit extends EthereumEvent {
  get params(): Ragequit__Params {
    return new Ragequit__Params(this);
  }
}

export class Ragequit__Params {
  _event: Ragequit;

  constructor(event: Ragequit) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesToBurn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SponsorProposal extends EthereumEvent {
  get params(): SponsorProposal__Params {
    return new SponsorProposal__Params(this);
  }
}

export class SponsorProposal__Params {
  _event: SponsorProposal;

  constructor(event: SponsorProposal) {
    this._event = event;
  }

  get delegateKey(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startingPeriod(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakeTokenForShares extends EthereumEvent {
  get params(): StakeTokenForShares__Params {
    return new StakeTokenForShares__Params(this);
  }
}

export class StakeTokenForShares__Params {
  _event: StakeTokenForShares;

  constructor(event: StakeTokenForShares) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubmitProposal extends EthereumEvent {
  get params(): SubmitProposal__Params {
    return new SubmitProposal__Params(this);
  }
}

export class SubmitProposal__Params {
  _event: SubmitProposal;

  constructor(event: SubmitProposal) {
    this._event = event;
  }

  get applicant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesRequested(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tributeOffered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get details(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get flags(): Array<i32> {
    return this._event.parameters[8].value.toI32Array();
  }

  get data(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get proposalId(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[11].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[12].value.toAddress();
  }
}

export class SubmitVote extends EthereumEvent {
  get params(): SubmitVote__Params {
    return new SubmitVote__Params(this);
  }
}

export class SubmitVote__Params {
  _event: SubmitVote;

  constructor(event: SubmitVote) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get uintVote(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class TokensCollected extends EthereumEvent {
  get params(): TokensCollected__Params {
    return new TokensCollected__Params(this);
  }
}

export class TokensCollected__Params {
  _event: TokensCollected;

  constructor(event: TokensCollected) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToCollect(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateDelegateKey extends EthereumEvent {
  get params(): UpdateDelegateKey__Params {
    return new UpdateDelegateKey__Params(this);
  }
}

export class UpdateDelegateKey__Params {
  _event: UpdateDelegateKey;

  constructor(event: UpdateDelegateKey) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDelegateKey(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends EthereumEvent {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class V2Moloch__membersResult {
  value0: Address;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set(
      "value1",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class V2Moloch__processActionProposalResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromBytes(this.value1));
    return map;
  }
}

export class V2Moloch__proposalsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;
  value13: Bytes;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
    value13: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromUnsignedBigInt(this.value8));
    map.set("value9", EthereumValue.fromUnsignedBigInt(this.value9));
    map.set("value10", EthereumValue.fromUnsignedBigInt(this.value10));
    map.set("value11", EthereumValue.fromUnsignedBigInt(this.value11));
    map.set("value12", EthereumValue.fromUnsignedBigInt(this.value12));
    map.set("value13", EthereumValue.fromFixedBytes(this.value13));
    return map;
  }
}

export class V2Moloch extends SmartContract {
  static bind(address: Address): V2Moloch {
    return new V2Moloch("V2Moloch", address);
  }

  ESCROW(): Address {
    let result = super.call("ESCROW", []);

    return result[0].toAddress();
  }

  try_ESCROW(): CallResult<Address> {
    let result = super.tryCall("ESCROW", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  GUILD(): Address {
    let result = super.call("GUILD", []);

    return result[0].toAddress();
  }

  try_GUILD(): CallResult<Address> {
    let result = super.tryCall("GUILD", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  TOTAL(): Address {
    let result = super.call("TOTAL", []);

    return result[0].toAddress();
  }

  try_TOTAL(): CallResult<Address> {
    let result = super.tryCall("TOTAL", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  actions(param0: BigInt): Bytes {
    let result = super.call("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_actions(param0: BigInt): CallResult<Bytes> {
    let result = super.tryCall("actions", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(spender),
      EthereumValue.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  approvedTokens(param0: BigInt): Address {
    let result = super.call("approvedTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_approvedTokens(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("approvedTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canRagequit(highestIndexYesVote: BigInt): boolean {
    let result = super.call("canRagequit", [
      EthereumValue.fromUnsignedBigInt(highestIndexYesVote)
    ]);

    return result[0].toBoolean();
  }

  try_canRagequit(highestIndexYesVote: BigInt): CallResult<boolean> {
    let result = super.tryCall("canRagequit", [
      EthereumValue.fromUnsignedBigInt(highestIndexYesVote)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  depositToken(): Address {
    let result = super.call("depositToken", []);

    return result[0].toAddress();
  }

  try_depositToken(): CallResult<Address> {
    let result = super.tryCall("depositToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  dilutionBound(): BigInt {
    let result = super.call("dilutionBound", []);

    return result[0].toBigInt();
  }

  try_dilutionBound(): CallResult<BigInt> {
    let result = super.tryCall("dilutionBound", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPeriod(): BigInt {
    let result = super.call("getCurrentPeriod", []);

    return result[0].toBigInt();
  }

  try_getCurrentPeriod(): CallResult<BigInt> {
    let result = super.tryCall("getCurrentPeriod", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getMemberProposalVote(memberAddress: Address, proposalIndex: BigInt): i32 {
    let result = super.call("getMemberProposalVote", [
      EthereumValue.fromAddress(memberAddress),
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);

    return result[0].toI32();
  }

  try_getMemberProposalVote(
    memberAddress: Address,
    proposalIndex: BigInt
  ): CallResult<i32> {
    let result = super.tryCall("getMemberProposalVote", [
      EthereumValue.fromAddress(memberAddress),
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getProposalFlags(proposalId: BigInt): Array<i32> {
    let result = super.call("getProposalFlags", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);

    return result[0].toI32Array();
  }

  try_getProposalFlags(proposalId: BigInt): CallResult<Array<i32>> {
    let result = super.tryCall("getProposalFlags", [
      EthereumValue.fromUnsignedBigInt(proposalId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32Array());
  }

  getProposalQueueLength(): BigInt {
    let result = super.call("getProposalQueueLength", []);

    return result[0].toBigInt();
  }

  try_getProposalQueueLength(): CallResult<BigInt> {
    let result = super.tryCall("getProposalQueueLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): CallResult<BigInt> {
    let result = super.tryCall("getTokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getUserTokenBalance(user: Address, token: Address): BigInt {
    let result = super.call("getUserTokenBalance", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getUserTokenBalance(user: Address, token: Address): CallResult<BigInt> {
    let result = super.tryCall("getUserTokenBalance", [
      EthereumValue.fromAddress(user),
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriodLength(): BigInt {
    let result = super.call("gracePeriodLength", []);

    return result[0].toBigInt();
  }

  try_gracePeriodLength(): CallResult<BigInt> {
    let result = super.tryCall("gracePeriodLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  hasVotingPeriodExpired(startingPeriod: BigInt): boolean {
    let result = super.call("hasVotingPeriodExpired", [
      EthereumValue.fromUnsignedBigInt(startingPeriod)
    ]);

    return result[0].toBoolean();
  }

  try_hasVotingPeriodExpired(startingPeriod: BigInt): CallResult<boolean> {
    let result = super.tryCall("hasVotingPeriodExpired", [
      EthereumValue.fromUnsignedBigInt(startingPeriod)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  memberAddressByDelegateKey(param0: Address): Address {
    let result = super.call("memberAddressByDelegateKey", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_memberAddressByDelegateKey(param0: Address): CallResult<Address> {
    let result = super.tryCall("memberAddressByDelegateKey", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  members(param0: Address): V2Moloch__membersResult {
    let result = super.call("members", [EthereumValue.fromAddress(param0)]);

    return new V2Moloch__membersResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_members(param0: Address): CallResult<V2Moloch__membersResult> {
    let result = super.tryCall("members", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new V2Moloch__membersResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  periodDuration(): BigInt {
    let result = super.call("periodDuration", []);

    return result[0].toBigInt();
  }

  try_periodDuration(): CallResult<BigInt> {
    let result = super.tryCall("periodDuration", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  processActionProposal(
    proposalIndex: BigInt
  ): V2Moloch__processActionProposalResult {
    let result = super.call("processActionProposal", [
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);

    return new V2Moloch__processActionProposalResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_processActionProposal(
    proposalIndex: BigInt
  ): CallResult<V2Moloch__processActionProposalResult> {
    let result = super.tryCall("processActionProposal", [
      EthereumValue.fromUnsignedBigInt(proposalIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new V2Moloch__processActionProposalResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  processingReward(): BigInt {
    let result = super.call("processingReward", []);

    return result[0].toBigInt();
  }

  try_processingReward(): CallResult<BigInt> {
    let result = super.tryCall("processingReward", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalCount(): BigInt {
    let result = super.call("proposalCount", []);

    return result[0].toBigInt();
  }

  try_proposalCount(): CallResult<BigInt> {
    let result = super.tryCall("proposalCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalDeposit(): BigInt {
    let result = super.call("proposalDeposit", []);

    return result[0].toBigInt();
  }

  try_proposalDeposit(): CallResult<BigInt> {
    let result = super.tryCall("proposalDeposit", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposalQueue(param0: BigInt): BigInt {
    let result = super.call("proposalQueue", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_proposalQueue(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("proposalQueue", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposals(param0: BigInt): V2Moloch__proposalsResult {
    let result = super.call("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new V2Moloch__proposalsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBytes()
    );
  }

  try_proposals(param0: BigInt): CallResult<V2Moloch__proposalsResult> {
    let result = super.tryCall("proposals", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new V2Moloch__proposalsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBytes()
      )
    );
  }

  proposedToKick(param0: Address): boolean {
    let result = super.call("proposedToKick", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_proposedToKick(param0: Address): CallResult<boolean> {
    let result = super.tryCall("proposedToKick", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  proposedToWhitelist(param0: Address): boolean {
    let result = super.call("proposedToWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_proposedToWhitelist(param0: Address): CallResult<boolean> {
    let result = super.tryCall("proposedToWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  stakeToken(): Address {
    let result = super.call("stakeToken", []);

    return result[0].toAddress();
  }

  try_stakeToken(): CallResult<Address> {
    let result = super.tryCall("stakeToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  submitActionProposal(
    actionTo: Address,
    actionTokenAmount: BigInt,
    actionValue: BigInt,
    details: Bytes,
    data: Bytes
  ): BigInt {
    let result = super.call("submitActionProposal", [
      EthereumValue.fromAddress(actionTo),
      EthereumValue.fromUnsignedBigInt(actionTokenAmount),
      EthereumValue.fromUnsignedBigInt(actionValue),
      EthereumValue.fromFixedBytes(details),
      EthereumValue.fromBytes(data)
    ]);

    return result[0].toBigInt();
  }

  try_submitActionProposal(
    actionTo: Address,
    actionTokenAmount: BigInt,
    actionValue: BigInt,
    details: Bytes,
    data: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("submitActionProposal", [
      EthereumValue.fromAddress(actionTo),
      EthereumValue.fromUnsignedBigInt(actionTokenAmount),
      EthereumValue.fromUnsignedBigInt(actionValue),
      EthereumValue.fromFixedBytes(details),
      EthereumValue.fromBytes(data)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  submitGuildKickProposal(memberToKick: Address, details: Bytes): BigInt {
    let result = super.call("submitGuildKickProposal", [
      EthereumValue.fromAddress(memberToKick),
      EthereumValue.fromFixedBytes(details)
    ]);

    return result[0].toBigInt();
  }

  try_submitGuildKickProposal(
    memberToKick: Address,
    details: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("submitGuildKickProposal", [
      EthereumValue.fromAddress(memberToKick),
      EthereumValue.fromFixedBytes(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  submitWhitelistProposal(tokenToWhitelist: Address, details: Bytes): BigInt {
    let result = super.call("submitWhitelistProposal", [
      EthereumValue.fromAddress(tokenToWhitelist),
      EthereumValue.fromFixedBytes(details)
    ]);

    return result[0].toBigInt();
  }

  try_submitWhitelistProposal(
    tokenToWhitelist: Address,
    details: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("submitWhitelistProposal", [
      EthereumValue.fromAddress(tokenToWhitelist),
      EthereumValue.fromFixedBytes(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  submitWithdrawalProposal(withdrawalTo: Address, details: Bytes): BigInt {
    let result = super.call("submitWithdrawalProposal", [
      EthereumValue.fromAddress(withdrawalTo),
      EthereumValue.fromFixedBytes(details)
    ]);

    return result[0].toBigInt();
  }

  try_submitWithdrawalProposal(
    withdrawalTo: Address,
    details: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("submitWithdrawalProposal", [
      EthereumValue.fromAddress(withdrawalTo),
      EthereumValue.fromFixedBytes(details)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  summoningTime(): BigInt {
    let result = super.call("summoningTime", []);

    return result[0].toBigInt();
  }

  try_summoningTime(): CallResult<BigInt> {
    let result = super.tryCall("summoningTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  tokenWhitelist(param0: Address): boolean {
    let result = super.call("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokenWhitelist(param0: Address): CallResult<boolean> {
    let result = super.tryCall("tokenWhitelist", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalGuildBankTokens(): BigInt {
    let result = super.call("totalGuildBankTokens", []);

    return result[0].toBigInt();
  }

  try_totalGuildBankTokens(): CallResult<BigInt> {
    let result = super.tryCall("totalGuildBankTokens", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalLoot(): BigInt {
    let result = super.call("totalLoot", []);

    return result[0].toBigInt();
  }

  try_totalLoot(): CallResult<BigInt> {
    let result = super.tryCall("totalLoot", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", []);

    return result[0].toBigInt();
  }

  try_totalShares(): CallResult<BigInt> {
    let result = super.tryCall("totalShares", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, lootToTransfer: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(lootToTransfer)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    lootToTransfer: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(lootToTransfer)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    sender: Address,
    recipient: Address,
    lootToTransfer: BigInt
  ): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(lootToTransfer)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    lootToTransfer: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(sender),
      EthereumValue.fromAddress(recipient),
      EthereumValue.fromUnsignedBigInt(lootToTransfer)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  votingPeriodLength(): BigInt {
    let result = super.call("votingPeriodLength", []);

    return result[0].toBigInt();
  }

  try_votingPeriodLength(): CallResult<BigInt> {
    let result = super.tryCall("votingPeriodLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  wETH(): Address {
    let result = super.call("wETH", []);

    return result[0].toAddress();
  }

  try_wETH(): CallResult<Address> {
    let result = super.tryCall("wETH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelProposalCall extends EthereumCall {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class CollectTokensCall extends EthereumCall {
  get inputs(): CollectTokensCall__Inputs {
    return new CollectTokensCall__Inputs(this);
  }

  get outputs(): CollectTokensCall__Outputs {
    return new CollectTokensCall__Outputs(this);
  }
}

export class CollectTokensCall__Inputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectTokensCall__Outputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }
}

export class ConvertSharesToLootCall extends EthereumCall {
  get inputs(): ConvertSharesToLootCall__Inputs {
    return new ConvertSharesToLootCall__Inputs(this);
  }

  get outputs(): ConvertSharesToLootCall__Outputs {
    return new ConvertSharesToLootCall__Outputs(this);
  }
}

export class ConvertSharesToLootCall__Inputs {
  _call: ConvertSharesToLootCall;

  constructor(call: ConvertSharesToLootCall) {
    this._call = call;
  }

  get sharesToLoot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConvertSharesToLootCall__Outputs {
  _call: ConvertSharesToLootCall;

  constructor(call: ConvertSharesToLootCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _depositToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _stakeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _summoner(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _summonerShares(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _summonerDeposit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _proposalDeposit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _processingReward(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _votingPeriodLength(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _gracePeriodLength(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _dilutionBound(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class ProcessActionProposalCall extends EthereumCall {
  get inputs(): ProcessActionProposalCall__Inputs {
    return new ProcessActionProposalCall__Inputs(this);
  }

  get outputs(): ProcessActionProposalCall__Outputs {
    return new ProcessActionProposalCall__Outputs(this);
  }
}

export class ProcessActionProposalCall__Inputs {
  _call: ProcessActionProposalCall;

  constructor(call: ProcessActionProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessActionProposalCall__Outputs {
  _call: ProcessActionProposalCall;

  constructor(call: ProcessActionProposalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class ProcessGuildKickProposalCall extends EthereumCall {
  get inputs(): ProcessGuildKickProposalCall__Inputs {
    return new ProcessGuildKickProposalCall__Inputs(this);
  }

  get outputs(): ProcessGuildKickProposalCall__Outputs {
    return new ProcessGuildKickProposalCall__Outputs(this);
  }
}

export class ProcessGuildKickProposalCall__Inputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessGuildKickProposalCall__Outputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }
}

export class ProcessProposalCall extends EthereumCall {
  get inputs(): ProcessProposalCall__Inputs {
    return new ProcessProposalCall__Inputs(this);
  }

  get outputs(): ProcessProposalCall__Outputs {
    return new ProcessProposalCall__Outputs(this);
  }
}

export class ProcessProposalCall__Inputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessProposalCall__Outputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }
}

export class ProcessWhitelistProposalCall extends EthereumCall {
  get inputs(): ProcessWhitelistProposalCall__Inputs {
    return new ProcessWhitelistProposalCall__Inputs(this);
  }

  get outputs(): ProcessWhitelistProposalCall__Outputs {
    return new ProcessWhitelistProposalCall__Outputs(this);
  }
}

export class ProcessWhitelistProposalCall__Inputs {
  _call: ProcessWhitelistProposalCall;

  constructor(call: ProcessWhitelistProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessWhitelistProposalCall__Outputs {
  _call: ProcessWhitelistProposalCall;

  constructor(call: ProcessWhitelistProposalCall) {
    this._call = call;
  }
}

export class ProcessWithdrawalProposalCall extends EthereumCall {
  get inputs(): ProcessWithdrawalProposalCall__Inputs {
    return new ProcessWithdrawalProposalCall__Inputs(this);
  }

  get outputs(): ProcessWithdrawalProposalCall__Outputs {
    return new ProcessWithdrawalProposalCall__Outputs(this);
  }
}

export class ProcessWithdrawalProposalCall__Inputs {
  _call: ProcessWithdrawalProposalCall;

  constructor(call: ProcessWithdrawalProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessWithdrawalProposalCall__Outputs {
  _call: ProcessWithdrawalProposalCall;

  constructor(call: ProcessWithdrawalProposalCall) {
    this._call = call;
  }
}

export class RagekickCall extends EthereumCall {
  get inputs(): RagekickCall__Inputs {
    return new RagekickCall__Inputs(this);
  }

  get outputs(): RagekickCall__Outputs {
    return new RagekickCall__Outputs(this);
  }
}

export class RagekickCall__Inputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }

  get memberToKick(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RagekickCall__Outputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }
}

export class RagequitCall extends EthereumCall {
  get inputs(): RagequitCall__Inputs {
    return new RagequitCall__Inputs(this);
  }

  get outputs(): RagequitCall__Outputs {
    return new RagequitCall__Outputs(this);
  }
}

export class RagequitCall__Inputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }

  get sharesToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RagequitCall__Outputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }
}

export class SponsorProposalCall extends EthereumCall {
  get inputs(): SponsorProposalCall__Inputs {
    return new SponsorProposalCall__Inputs(this);
  }

  get outputs(): SponsorProposalCall__Outputs {
    return new SponsorProposalCall__Outputs(this);
  }
}

export class SponsorProposalCall__Inputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SponsorProposalCall__Outputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }
}

export class StakeTokenForSharesCall extends EthereumCall {
  get inputs(): StakeTokenForSharesCall__Inputs {
    return new StakeTokenForSharesCall__Inputs(this);
  }

  get outputs(): StakeTokenForSharesCall__Outputs {
    return new StakeTokenForSharesCall__Outputs(this);
  }
}

export class StakeTokenForSharesCall__Inputs {
  _call: StakeTokenForSharesCall;

  constructor(call: StakeTokenForSharesCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeTokenForSharesCall__Outputs {
  _call: StakeTokenForSharesCall;

  constructor(call: StakeTokenForSharesCall) {
    this._call = call;
  }
}

export class SubmitActionProposalCall extends EthereumCall {
  get inputs(): SubmitActionProposalCall__Inputs {
    return new SubmitActionProposalCall__Inputs(this);
  }

  get outputs(): SubmitActionProposalCall__Outputs {
    return new SubmitActionProposalCall__Outputs(this);
  }
}

export class SubmitActionProposalCall__Inputs {
  _call: SubmitActionProposalCall;

  constructor(call: SubmitActionProposalCall) {
    this._call = call;
  }

  get actionTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get actionTokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get actionValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get details(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SubmitActionProposalCall__Outputs {
  _call: SubmitActionProposalCall;

  constructor(call: SubmitActionProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitGuildKickProposalCall extends EthereumCall {
  get inputs(): SubmitGuildKickProposalCall__Inputs {
    return new SubmitGuildKickProposalCall__Inputs(this);
  }

  get outputs(): SubmitGuildKickProposalCall__Outputs {
    return new SubmitGuildKickProposalCall__Outputs(this);
  }
}

export class SubmitGuildKickProposalCall__Inputs {
  _call: SubmitGuildKickProposalCall;

  constructor(call: SubmitGuildKickProposalCall) {
    this._call = call;
  }

  get memberToKick(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitGuildKickProposalCall__Outputs {
  _call: SubmitGuildKickProposalCall;

  constructor(call: SubmitGuildKickProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitProposalCall extends EthereumCall {
  get inputs(): SubmitProposalCall__Inputs {
    return new SubmitProposalCall__Inputs(this);
  }

  get outputs(): SubmitProposalCall__Outputs {
    return new SubmitProposalCall__Outputs(this);
  }
}

export class SubmitProposalCall__Inputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sharesRequested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tributeOffered(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get details(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class SubmitProposalCall__Outputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitVoteCall extends EthereumCall {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uintVote(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}

export class SubmitWhitelistProposalCall extends EthereumCall {
  get inputs(): SubmitWhitelistProposalCall__Inputs {
    return new SubmitWhitelistProposalCall__Inputs(this);
  }

  get outputs(): SubmitWhitelistProposalCall__Outputs {
    return new SubmitWhitelistProposalCall__Outputs(this);
  }
}

export class SubmitWhitelistProposalCall__Inputs {
  _call: SubmitWhitelistProposalCall;

  constructor(call: SubmitWhitelistProposalCall) {
    this._call = call;
  }

  get tokenToWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitWhitelistProposalCall__Outputs {
  _call: SubmitWhitelistProposalCall;

  constructor(call: SubmitWhitelistProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitWithdrawalProposalCall extends EthereumCall {
  get inputs(): SubmitWithdrawalProposalCall__Inputs {
    return new SubmitWithdrawalProposalCall__Inputs(this);
  }

  get outputs(): SubmitWithdrawalProposalCall__Outputs {
    return new SubmitWithdrawalProposalCall__Outputs(this);
  }
}

export class SubmitWithdrawalProposalCall__Inputs {
  _call: SubmitWithdrawalProposalCall;

  constructor(call: SubmitWithdrawalProposalCall) {
    this._call = call;
  }

  get withdrawalTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SubmitWithdrawalProposalCall__Outputs {
  _call: SubmitWithdrawalProposalCall;

  constructor(call: SubmitWithdrawalProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lootToTransfer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lootToTransfer(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateDelegateKeyCall extends EthereumCall {
  get inputs(): UpdateDelegateKeyCall__Inputs {
    return new UpdateDelegateKeyCall__Inputs(this);
  }

  get outputs(): UpdateDelegateKeyCall__Outputs {
    return new UpdateDelegateKeyCall__Outputs(this);
  }
}

export class UpdateDelegateKeyCall__Inputs {
  _call: UpdateDelegateKeyCall;

  constructor(call: UpdateDelegateKeyCall) {
    this._call = call;
  }

  get newDelegateKey(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDelegateKeyCall__Outputs {
  _call: UpdateDelegateKeyCall;

  constructor(call: UpdateDelegateKeyCall) {
    this._call = call;
  }
}

export class WithdrawBalanceCall extends EthereumCall {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class WithdrawBalancesCall extends EthereumCall {
  get inputs(): WithdrawBalancesCall__Inputs {
    return new WithdrawBalancesCall__Inputs(this);
  }

  get outputs(): WithdrawBalancesCall__Outputs {
    return new WithdrawBalancesCall__Outputs(this);
  }
}

export class WithdrawBalancesCall__Inputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get max(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawBalancesCall__Outputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }
}
